// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace WebTemplate.Migrations
{
    [DbContext(typeof(WellniContext))]
    [Migration("20230524135923_V3")]
    partial class V3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kontakt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<int?>("zaUsluguID")
                        .HasColumnType("int");

                    b.Property<int?>("zaZaposlenogID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("zaUsluguID");

                    b.HasIndex("zaZaposlenogID");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Models.SpecijalnePonude", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdministratorID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obavestenje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdministratorID");

                    b.ToTable("SpecijalnePonude");
                });

            modelBuilder.Entity("Models.Termin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Dan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sati")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int?>("ZaposleniID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("ZaposleniID");

                    b.ToTable("Termini");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Cena")
                        .HasColumnType("int");

                    b.Property<int>("DuzinaTrajanja")
                        .HasColumnType("int");

                    b.Property<int>("MaxKapacitet")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Usluge");
                });

            modelBuilder.Entity("Models.Zakazivanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("TerminID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("TerminID");

                    b.ToTable("Zakazivanje");
                });

            modelBuilder.Entity("Models.Zaposleni", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zanimanje")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Zaposleni");
                });

            modelBuilder.Entity("Models.ZaposleniUsluga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int>("ZaposleniID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("ZaposleniID");

                    b.ToTable("ZaposleniUsluga");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("Recenzije")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Usluga", "zaUslugu")
                        .WithMany("Recenzije")
                        .HasForeignKey("zaUsluguID");

                    b.HasOne("Models.Zaposleni", "zaZaposlenog")
                        .WithMany("Recenzije")
                        .HasForeignKey("zaZaposlenogID");

                    b.Navigation("Korisnik");

                    b.Navigation("zaUslugu");

                    b.Navigation("zaZaposlenog");
                });

            modelBuilder.Entity("Models.SpecijalnePonude", b =>
                {
                    b.HasOne("Models.Korisnik", "Administrator")
                        .WithMany("SpecijalnePonude")
                        .HasForeignKey("AdministratorID");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("Models.Termin", b =>
                {
                    b.HasOne("Models.Usluga", "Usluga")
                        .WithMany("Termini")
                        .HasForeignKey("UslugaID");

                    b.HasOne("Models.Zaposleni", "Zaposleni")
                        .WithMany("Termini")
                        .HasForeignKey("ZaposleniID");

                    b.Navigation("Usluga");

                    b.Navigation("Zaposleni");
                });

            modelBuilder.Entity("Models.Zakazivanje", b =>
                {
                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("Termini")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Termin", "Termin")
                        .WithMany("Korisnici")
                        .HasForeignKey("TerminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("Models.ZaposleniUsluga", b =>
                {
                    b.HasOne("Models.Usluga", "Usluga")
                        .WithMany("Zaposleni")
                        .HasForeignKey("UslugaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Zaposleni", "Zaposleni")
                        .WithMany("Usluge")
                        .HasForeignKey("ZaposleniID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usluga");

                    b.Navigation("Zaposleni");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("Recenzije");

                    b.Navigation("SpecijalnePonude");

                    b.Navigation("Termini");
                });

            modelBuilder.Entity("Models.Termin", b =>
                {
                    b.Navigation("Korisnici");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Navigation("Recenzije");

                    b.Navigation("Termini");

                    b.Navigation("Zaposleni");
                });

            modelBuilder.Entity("Models.Zaposleni", b =>
                {
                    b.Navigation("Recenzije");

                    b.Navigation("Termini");

                    b.Navigation("Usluge");
                });
#pragma warning restore 612, 618
        }
    }
}
